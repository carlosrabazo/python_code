import rlcompleterimport readlinereadline.parse_and_bind("tab: complete")#-------------------------------------------------------------------------for i in range(10):	print(i, end=' ')#-------------------------------------------------------------------------print('www.python.org')#-------------------------------------------------------------------------import sys, osprint(sys.platform)#-------------------------------------------------------------------------for i in range(2):	if i % 2 == 0:		print("Estoy detro del bloque if, por lo que...")		print(i)		continue	print("El bloque if ha sido omitido, por lo que...")	print(i)#-------------------------------------------------------------------------for i in range(2):	print(i)	print(i+1)# OBJETOS INTEGRADOS ###################################################### Tipos de datos basicos #################################################22 + 331.5 * 1.5(1 + 1j) / (1 - 1j)#-------------------------------------------------------------------------type(22)type(1.5)type(1 + 1j)id(22)id(1.5)id(1j)#-------------------------------------------------------------------------a = 11b = 11.0c = 11 + 0ja.bit_length()c.imag#-------------------------------------------------------------------------s1 = 'hola's2 = 'hello's1.upper()s2.upper()#-------------------------------------------------------------------------mylist1 = [3, 1, 2]mylist1.sort()mylist1mylist2 = ['c', 'a', 'b']mylist2.sort()mylist2#-------------------------------------------------------------------------c = 1 + 2jtype(c)c.conjugatec.conjugate()callable(c.conjugate)c.realcallable(c.real)# c.real()#-------------------------------------------------------------------------sumcallable(sum)sum([1, 2, 3])s = 'hola's.uppers.upper()c = 1 + 2jc.real - c.imagc.realc.imagc.conjugatec.conjugate()#-------------------------------------------------------------------------dir(33)hasattr(33, 'as_integer_ratio')hasattr(33.0, 'as_integer_ratio')# Cadenas de Texto #######################################################s = "ejemplo de cadena de texto"type(s)s.index('l')s[5]s[2:6]a, b, c, d = s[2:6]acs.startswith('ejem')s.count('de')s.title()s.upper()'    hola    '.strip()'python' * 3'44' + '44'int('44') + int('44')# s[0] = 'E' # str son objetos inmutables# Listas #################################################################mylist = ['hola', 100, 33]mylist.index(100)mylist[1] # Indexacionmylist[0:2] # Slicing'hola' in mylistmylist.reverse() # Modifica lista invirtiendo el ordenmylistmylist.pop() # Devuelve y elimina ultimo elemento en listamylistmylist.append(5) # Insertan elemento en listamylist.sort() # Modificar lista reordenandomylistmylist.extend(['a', 'b', 'c']) # Ampliacionmylistmylist + ['python'] # Concatenacionmylist * 3 # Repeticionmylist[2] = 77 # Las listas son objetos mutablesmylista, b, c = [1, 2, 3] # Desempaquetadob# Tuplas #################################################################t = (1, 'dos', [1, 'lista'], 'dos', ())t.count('dos')t[1]# t[1] = 'uno' # Las tuplas son inmutablesa, b = (1, -2) # La tupla es desempaquetada para la asignacionba, b = 1, -2 # La tupla se crea (1, -2) y despues se desempaquetaa, type(b) # Elementos separados por coma: devuelve una tupla# Diccionarios ###########################################################d = {'perro':'guau', 'gato':'miau', 'uno':1, 2:'dos'}d['perro']2 in d'guau' in dd.pop('perro')dd['uno'] += 1d# Conjuntos ############################################################### no pueden contener objetos mutables: son contenedores no ordenadoss1 = {1, 'uno', 'one', 'numero'}s2 = {1, 'uno', 'two'}s1 | s2s1 & s2s1 - s2s2.add(2)s2# s = {1, 2, []} # No puede contener objetos mutables como una lista# Funciones y Clases Integradas ##########################################any([1, 0, 3]), any((0, 0, 0))all((1, 1, 1)), all([1, 1, 0])bin(15), hex(15), oct(15)len(['a', 'b', 3, 'd'])max([1, 2, 5, 3]), min([1, 2, 5, 3])abs(1 - 1j)sum([1, 2, 3, 4])str(['a', 'b', 'c', 1, 2])eval('2 * 2')exec('a = 2 * 2')a# LIBRERIA ESTANDAR Y CONCEPTO DE MODULO #################################import mathmath.pi math.sin(0), math.log(1)from math import pi, sin, logpisin(0), log(1)from datetime import datetimed = datetime.now()d.year, d.month, d.dayd.minute, d.second(datetime.now() - d).secondsimport syssys.platformsys.versionimport osos.environ['HOME'], os.environ['SHELL'] # os.environ es un diccionariou = os.uname()u.sysname, u.version#--------------------------------------------------------------------------from urllib.request import urlopenfor line in urlopen('http://www.python.org/community/diversity/'):	text = line.decode('utf-8')	if '<title>' in text:		print(text)import webbrowserurl = 'http://www.python.org/dev/peps/pep-0001/'webbrowser.open(url)import globglob.glob('*')glob.glob('*.py')# DEFINIR LAS FUNCIONES ##################################################def square(x):	return x * xsquare(2)def foo():	passa = foo()type(a)# DEFINIR LAS CLASES #####################################################from datetime import datetimeclass Person:	def __init__(self, name, surname):		self.name = name		self.surname = surname		self.registration_date = datetime.now()	def since(self):		return (datetime.now() - self.registration_date).secondsp1 = Person('Tim', 'Peters')p2 = Person('Raymond', 'Hettinger')p1.namep1.surnamep2.since()p1.since()isinstance(p1, Person), isinstance(p2, Person)# ARCHIVOS ###############################################################f = open('/Users/carlosrabazo/poem')f.name, f.encodingf.read()f = open('/Users/carlosrabazo/poem')lines = f.readline()lineslines[1]len('\n')print('python\n3\nabcd')for line in open('/Users/carlosrabazo/poem'):	print(line, end=' ')f = open('myfile', 'w')f.write('Escribimos algo en el archivo...')f = open('myfile')f.read()# FUNCION INTEGRADA PRINT() ##############################################print()print('a', 'b', 'c', 1, 2, 3)print([1,2], 3, 'venga!', sep='-')import syssys.stdout.write(str([1,2]) + '-' + str(3) + '-' + 'venga!' + '\n')print('una lista:', [1,2], file=open('myfile','w'))open('myfile').read()file = open('myfile', 'w')file.write(str('una lista: ') + ' ' + str([1,2]) + '\n')f = open('myfile', 'w')print('una lista', [1,2], file=f)print('segunda linea', file=f)open('myfile').read()f.close()open('myfile').read()f = open('myfile', 'w')print('linea a escribir sobre el archivo...', file=f, flush=True)open('myfile').read()import syssys.stdout = open('myfile.log', 'w')print('escribo en el archivo log')print('todavia en el archivo log...')sys.stdout.close()open('myfile.log').read()sys.stdout = sys.__stdout__print('aqu√≠ estamos')# OBTENER INFORMACION SOBRE LOS OBJETOS ##################################type([1, 2, 3, 4])id('python')hasattr(1 + 2j, 'real')dir(1 + 2j)isinstance(22, int)callable(isinstance)'yth' in 'python'1 in ['a', 'c', 1, 2]l1 = [1, 2, 3]l2 = [1, 2, 3]l1 == l2l1 is l2id(l1), id(l2)l3 = l2l2 is l2id(l2), id(l3)# dir() ##################################################################dir(33)'__name__' in dir(dict)dict.__name__hasattrib(dict, '__name__')dir(str)# help() y cadenas de documentacion ######################################help(str.split)mylist=[]for item in '33;91;77;15'.split(';'):	mylist.append(int(item))mylistmylist = [int(item) for item in '33;91;77;15'.split(';')]mylistsum([int(item) for item in '33;91;77;15'.split(';')])sum(int(item) for item in '33;91;77;15'.split(';'))# python myscript.pydef doubling(obj):	"""Duplica el objeto."""	return obj*2doubling.__doc__help(doubling)s = 'python'print(s.upper.__doc__)print(str.upper.__doc__)# EL ZEN DE PYTHON ######################################################## cat /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/this.pyimport thisthis.__doc__dir(this)this.cthis.dthis.ithis.sout = "".join([c in this.d and this.d[c] or c for c in this.s])print(out)# LOS ELEMENTOS DEL CODIGO PYTHON  #######################################a = 10 + 20 + \30 + 40 + \50aa = (10 + 20 +30 + 40 +50)a# comentarios ############################################################a = 1 # pues eso...# literales  #############################################################s = 'literal de cadena de texto'type(s)i = 10type(i)f = 12.33type(f)c = 12.33 + 1jtype(c)t = ('a', 'b', 3)type(t)mylist = ['a', 'b', 3]type(mylist)d = {1: 'uno', 2: 'due'}type(d)s = {'a', 'b', 'c'}type(s)s = 'python's.__class__# operadores #############################################################22 + 33'python es' + ' ' + 'es sencillamente maravilloso'[1, 2, 3] + ['a', 'b']a = [1, 2, 3]a == [1, 2, 3]2 ** 4# palabras clave #########################################################help('keywords')10 * False, 10 + False10 * True, 10 + Truetype(False), type(True), type(None)# delimitadores ########################################################### = . , ;# etiquetas ############################################################### hay que definirlas antes de poder usarlas excepto  las predefinidastype(print)import builtinsdir(builtins)import mathmathprint = ['python', 99]print# ARQUITECTURA DE UN PROGRAMA PYTHON ###################################### expresiones ############################################################a = 'p' in 'python'aa = print('python')ax = 'a' if 4 == 2 + 2 else 'b'x# instrucciones ########################################################### simples y compuestasimport mathfor i in range(2):	print(math.sin(i))	print(math.cos(i))# asignaciona = b = c = 1abca, b, c = 1, 2, 3abca, b, c, d, e, f = 'python'b# passpass# dela = b = [1, 2, 3]a is bdel aab# returndef foo(x):	return x ** 2foo(4)def foo():	passNone is foo()# importimport mathmath.pi# fromfrom math import pi, coscos(pi)# assert genera una excepci√≥n del tipo AssertionErrorassert 2*2 == 4assert 2*2 == 6# ifs = 'python'if 'm' in s:	print('mmm')elif 'n' in s:	print('nnn')else:	print(s)#-----------------def switch(codigo):	d = {0: len, 1: min, 2: max}	return d.get(codigo, sum)switch(0)([1, 2, 3])switch(2)((5, 9, 1))switch(7)((5, 9, 1))# forfor i in ('a', 'b'):	print(i)for i in [(1, 'uno'), (2, 'dos'), (3, 'tres')]:	print(i)for i, j in [(1, 'uno'), (2, 'dos'), (3, 'tres')]:	print(i, j)for i in range(20):	if i % 2 == 0:		continue	print(i, end=' ')for i in range(20):	if i == 13:		break	print(i, end=' ')for i in range(10):	print(i, end=' ')else:	print('Ejecucion de la suite else')# whilewhile True:	x = input('Escribe algo (sal con Ctl-M en Unix , Ctl-Z+Return en Windows)')	print('Has escrito', x)# modulos ###############################################################from mymodule import mylistprint(mylist)mylist.append(4)print(mylist)__name__b = 100import __main____main__.b__main__.c = 50c# PYTHON VIRTUAL MACHINE  ###############################################def square(x):	return x * ximport disdis.dis(square)import mm.__file__m.__cached__import impimp.get_tag()import osos__file__imp.source_from_cache(os.__cached__)imp.cache_from_source(os.__file__)import syssys.dont_write_bytecode=Trueimport m# ETIQUETAS Y OBJETOS  ##################################################